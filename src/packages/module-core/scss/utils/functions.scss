// TAKEN FROM ZURB FOUNDATION

$rem-base: 16px !default;

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  } // Turn 0rem into 0
  @return $value;
}

@function convert-to-em($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) {
    $value: 0;
  } // Turn 0em into 0
  @return $value;
}

@function em-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 {
    @return convert-to-em(nth($values, 1), $base-value);
  }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($remValues, convert-to-em(nth($values, $i), $base-value));
  }
  @return $emValues;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append(
      $remValues,
      convert-to-rem(nth($values, $i), $base-value)
    );
  }
  @return $remValues;
}

@function grid-column($column) {
  @return unquote((100 * $column / $columns) + "%");
}

@function block-column($column) {
  @return unquote((100 * ($columns/$column) / $columns) + "%");
}

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  } @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  } @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  } @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  } @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  } @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function size($keys...) {
  @return map-deep-get($sizes, $keys...);
}

@function colour($key) {
  @return map-get($colours, $key);
}

@function border($key) {
  @return map-get($border, $key);
}
